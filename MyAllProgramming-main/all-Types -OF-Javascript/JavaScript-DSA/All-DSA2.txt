////check  same  array
let data = [20, 10 , 20 ];
// Using a for loop
let areAllElementsSame = true;
for (let i = 1; i < data.length; i++) {
    if (data[i] !== data[0]) {
        areAllElementsSame = false;
        console.log(data[0] , "this is array")
        break;
    }
}


console.log(areAllElementsSame);

let data = [10, 10, 10, 10];
// Using the every() method
let areAllElementsSame = data.every(element => element === data[0]);
console.log(areAllElementsSame);


////sUM of all array////////!SECTION//////ANCHOR - 
function sumArray(array) {
  let sum = 0;
  for (let i = 0; i < array.length; i++) {
    sum += array[i];
  }
  return sum;
}
const array = [1, 2, 3, 4, 5];
const arraySum = sumArray(array);
console.log(arraySum); // Output: 15


function sumArray(array) {
  return array.reduce((sum, currentValue) => sum + currentValue, 0);
}

const array = [1, 2, 3, 4, 5];
const arraySum = sumArray(array);
console.log(arraySum); // Output: 15



/////////Check Prime Number//////////!SECTION




//////check prime nUMBER in Jvacript

///Prime Number 2 3 5 7 11 13 17 19 23 29 31 
///EvEn Number 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 
//add Number 1 , 3 , 5 , 7 ,9 , 11 ,  // this is prime number


function isPrime(n) {
  if (n < 2) {
    return false
  }
  for (let i = 2; i <= Math.sqrt(n); i++) {
    // if n is divisible by any number then it is not prime
    if (n % i === 0) {
      return false
    }
  }
  return true
}
 /////////
console.log(isPrime(1)) // false
console.log(isPrime(5)) // true
console.log(isPrime(4)) // false


////Even number 

function checkEvenNumbers(array) {
  const evenNumbers = array.filter(number => number % 2 === 0);
  return evenNumbers;
}

const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
const evenNumbers = checkEvenNumbers(numbers);
console.log(evenNumbers); // Output: [2, 4, 6, 8, 10]
function checkEvenNumbers(array) {
  const evenNumbers = [];
  for (let i = 0; i < array.length; i++) {
    if (array[i] % 2 === 0) {
      evenNumbers.push(array[i]);
    }
  }
  return evenNumbers;
}

const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
const evenNumbers = checkEvenNumbers(numbers);
console.log(evenNumbers); // Output: [2, 4, 6, 8, 10]


///RotatIon Array Javascript//////!SECTION

function rotateArray(array, positions) {
  const rotatedArray = [...array]; // Create a copy of the original array

  // Perform rotation
  for (let i = 0; i < positions; i++) {
    const element = rotatedArray.shift(); // Remove the first element
    rotatedArray.push(element); // Add the element at the end
  }

  return rotatedArray;
}

const array = [1, 2, 3, 4, 5];
const rotatedArray = rotateArray(array, 2);
console.log(rotatedArray); // Output: [3, 4, 5, 1, 2]


//////////////////////////
function rotateArray(array) {
  const firstElement = array.shift(); // Remove the first element
  array.push(firstElement); // Add the element at the end
}

const array = [1, 2, 3, 4, 5];
rotateArray(array);
console.log(array); // Output: [2, 3, 4, 5, 1]




///////////////////////Marge sort in Jvacript////////////!SECTION

function mergesort(arr) {
  if (arr.length < 2) {
    return arr
  }
  const mid = Math.floor(arr.length / 2)
  const leftArr = arr.slice(0, mid)
  const rightArr = arr.slice(mid)
  return merge(mergesort(leftArr), mergesort(rightArr))
}

function merge(leftArr, rightArr) {
  const sortedArr = []
  while (leftArr.length && rightArr.length) {
    if (leftArr[0] <= rightArr[0]) {
      sortedArr.push(leftArr.shift())
    } else {
      sortedArr.push(rightArr.shift())
    }
  }
  const resultArr = [...sortedArr, ...leftArr, ...rightArr]
  return resultArr
}

const arr = [8, 20, -2, 4, -6]
console.log(mergesort(arr)) // [-6, -2, 4, 8, 20]




///////////////////////Cartesian-Product.js////////////////!SECTION
function cartesianProduct(arr1, arr2) {
    const result = []
    for (let i = 0; i < arr1.length; i++) {
      for (let j = 0; j < arr2.length; j++) {
        result.push([arr1[i], arr2[j]])
      }
    }
    return result
  }
  const arr1 = [1, 2]
  const arr2 = [3, 4, 5]
  console.log(cartesianProduct(arr1, arr2)) // [[1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5]]
  

  ////////////////////////In JavaScript, you can implement a simple hash table using objects to perform search operations. Here's an example implementation of a hash table search algorithm:
  /////////////SECTION - 

class HashTable {
  constructor() {
    this.table = {};
  }

  // Hash function
  hash(key) {
    let hashValue = 0;
    for (let i = 0; i < key.length; i++) {
      hashValue += key.charCodeAt(i);
    }
    return hashValue;
  }

  // Insert a key-value pair into the hash table
  insert(key, value) {
    const hashKey = this.hash(key);
    this.table[hashKey] = value;
  }

  // Search for a value by key in the hash table
  search(key) {
    const hashKey = this.hash(key);
    return this.table[hashKey];
  }

  // Remove a key-value pair from the hash table
  remove(key) {
    const hashKey = this.hash(key);
    if (this.table.hasOwnProperty(hashKey)) {
      delete this.table[hashKey];
    }
  }
}

// Usage example
const hashTable = new HashTable();

hashTable.insert("name", "John");
hashTable.insert("age", 25);
hashTable.insert("city", "New York");

console.log(hashTable.search("name")); // Output: John
console.log(hashTable.search("age")); // Output: 25
console.log(hashTable.search("city")); // Output: New York

hashTable.remove("age");
console.log(hashTable.search("age")); // Output: undefined

////Algo ////////////////////////////////!SECTION

Time complexity is a measure of how long an algorithm takes to run.
Space complexity is a measure of how much memory an algorithm uses.
Big O notation is a way of expressing the time and space complexity of an algorithm.
\



/////////////////Backtracking Algorithms: Backtracking algorithms are////!SECTION





///////Knuth-Morris-Pratt (KMP) Algorithm:////////////
function buildPatternTable(pattern) {
  const table = [0];
  let prefixLength = 0;
  let i = 1;

  while (i < pattern.length) {
    if (pattern[i] === pattern[prefixLength]) {
      prefixLength++;
      table[i] = prefixLength;
      i++;
    } else {
      if (prefixLength !== 0) {
        prefixLength = table[prefixLength - 1];
      } else {
        table[i] = 0;
        i++;
      }
    }
  }

  return table;
}

function searchKMP(text, pattern) {
  const patternTable = buildPatternTable(pattern);
  let i = 0;
  let j = 0;

  while (i < text.length) {
    if (text[i] === pattern[j]) {
      i++;
      j++;
    }

    if (j === pattern.length) {
      return i - j; // Match found, return the starting index of the match
    }

    if (i < text.length && text[i] !== pattern[j]) {
      if (j !== 0) {
        j = patternTable[j - 1];
      } else {
        i++;
      }
    }
  }

  return -1; // Match not found
}

// Usage example
const text = "ABCABDABACDABABCABAB";
const pattern = "ABABCABAB";

const index = searchKMP(text, pattern);
if (index !== -1) {
  console.log(`Pattern found at index ${index}`);
} else {
  console.log("Pattern not found");
}



////Boyer-Moore Algorithm:
The Boyer-Moore algorithm is a powerful string matching algorithm that takes advantage of /////!SECTION


function buildBadCharacterTable(pattern) {
  const table = {};

  for (let i = 0; i < pattern.length - 1; i++) {
    table[pattern[i]] = pattern.length - 1 - i;
  }

  return table;
}

function searchBoyerMoore(text, pattern) {
  const badCharacterTable = buildBadCharacterTable(pattern);
  let textIndex = pattern.length - 1;
  let patternIndex = pattern.length - 1;

  while (textIndex < text.length) {
    if (text[textIndex] === pattern[patternIndex]) {
      // Character matches
      if (patternIndex === 0) {
        // Match found
        return textIndex;
      }
      textIndex--;
      patternIndex--;
    } else {
      // Mismatch occurred
      const badCharacterSkip = badCharacterTable[text[textIndex]] || pattern.length;
      const patternShift = pattern.length - patternIndex;
      textIndex += Math.max(badCharacterSkip, patternShift);
      patternIndex = pattern.length - 1;
    }
  }

  return -1; // Match not found
}

// Usage example
const text = "ABCABDABACDABABCABAB";
const pattern = "ABABCABAB";

const index = searchBoyerMoore(text, pattern);
if (index !== -1) {
  console.log(`Pattern found at index ${index}`);
} else {
  console.log("Pattern not found");
}




///////////////////////Tower of hanoi.js////////////!SECTION

function towerOfHanoi(n, fromRod, toRod, usingRod) {
  if (n === 1) {
    console.log(`Move disk 1 from ${fromRod} to ${toRod}`)
    return
  }
  towerOfHanoi(n - 1, fromRod, usingRod, toRod)
  console.log(`Move disk ${n} from ${fromRod} to ${toRod}`)
  towerOfHanoi(n - 1, usingRod, toRod, fromRod)
}

towerOfHanoi(3, 'A', 'C', 'B')




./////////////////ClimeBing Staicase.js///////////////////!SECTION


function climbingStaircase(n) {
    const noOfWays = [1, 2]
    for (let i = 2; i <= n; i++) {
      noOfWays[i] = noOfWays[i - 1] + noOfWays[i - 2]
    }
    return noOfWays[n - 1]
  }
  
  console.log(climbingStaircase(1))
  console.log(climbingStaircase(2))
  console.log(climbingStaircase(3))
  console.log(climbingStaircase(4))
  console.log(climbingStaircase(5))


////////////////////////// Ramdom Number gentera/////////!SECTION
// function generateRandomString(length) {
//     const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
//     let result = '';
//     for (let i = 0; i < length; i++) {
//       const randomIndex = Math.floor(Math.random() * characters.length);
//       result += characters.charAt(randomIndex);
//     }
//     return result;
//   }
  
//   // Generate a random string of length 10
//   const randomString = generateRandomString(10);
//   console.log(randomString);





let hexcolor=`#${Math.random().toString(16).slice(2,8).toUpperCase().padEnd(6 , 0)}`

console.log(hexcolor)

// padEnd // example minum 8 length of letterr

let name="jugal"

console.log(name.padEnd(8 , 0))


/////////////////Bsf ////////////////!SECTION
 Here's the full code for BFS (Breadth-First Search) in JavaScript

 ////////////////
function bfs(graph, startNode) {
  var visited = new Set();
  var queue = [];
  
  visited.add(startNode);
  queue.push(startNode);
  
  while (queue.length > 0) {
    var currentNode = queue.shift();
    console.log(currentNode);
    
    var neighbors = graph[currentNode];
    for (var i = 0; i < neighbors.length; i++) {
      var neighbor = neighbors[i];
      if (!visited.has(neighbor)) {
        visited.add(neighbor);
        queue.push(neighbor);
      }
    }
  }
}

// Example graph
var graph = {
  'A': ['B', 'C'],
  'B': ['D', 'E'],
  'C': ['F'],
  'D': [],
  'E': ['F'],
  'F': []
};

bfs(graph, 'A');




/////////////////Dsf

Here's a basic implementation of DFS using recursion in JavaScript:


function dfs(graph, currentNode, visited) {
  visited.add(currentNode);
  console.log(currentNode);
  
  var neighbors = graph[currentNode];
  for (var i = 0; i < neighbors.length; i++) {
    var neighbor = neighbors[i];
    if (!visited.has(neighbor)) {
      dfs(graph, neighbor, visited);
    }
  }
}

// Example graph
var graph = {
  'A': ['B', 'C'],
  'B': ['D', 'E'],
  'C': ['F'],
  'D': [],
  'E': ['F'],
  'F': []
};

var visited = new Set();
dfs(graph, 'A', visited);
