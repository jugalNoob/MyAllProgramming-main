
Types New Loop |||||||||||||||
|||||||||||||

// let count = 0;

// do {
//     console.log(`Count: ${count}`);
//     count++;
// } while (count < 5);

function customLoop(iterations, current = 0) {
    if (current < iterations) {
      console.log(`Iteration ${current}`);
      customLoop(iterations, current + 1);
    }
  }
  
  customLoop(5); // This will simulate a loop and print Iteration 0 to Iteration 4.

function* customLoop(iterations) {
    for (let i = 0; i < iterations; i++) {
      yield i;
    }
  }
  
  const loopGenerator = customLoop(5);
  
  for (let iteration of loopGenerator) {
    console.log(`Custom Loop - Iteration ${iteration}`);
  }
  




JavaScript Insert  |||||||||||||||||||||||||||||||||||||||||||

// Create an array
var myArray = ["Element 1", "Element 2", "Element 3"];

// Define elements to insert and their corresponding indexes
var elementsToInsert = ["New Element 1", "New Element 2"];
var insertionIndexes = [1, 3];

// Insert elements into the array using a loop with indexes
for (var i = 0; i < elementsToInsert.length; i++) {
  var index = insertionIndexes[i];
  myArray.splice(index, 0, elementsToInsert[i]);
}

console.log(myArray);


// Create an array
// Use Destructuring in for...of Loops:
const pairs = [[1, 'one'], [2, 'two'], [3, 'three']];
for (const [number, name] of pairs) {
  console.log(`${name} is ${number}`);
}



// Use Object.keys(), Object.values(), or Object.entries():
const obj = { a: 1, b: 2, c: 3 };
for (const key of Object.keys(obj)) {
  console.log(`Key: ${key}, Value: ${obj[key]}`);
}


2::Loop Over Arrays Efficiently:
Use for and while loops when you need to 
iterate through an array by index, but
 consider using for...of for simpler 
 iteration over array elements.


3::Loop Control Statements:


for (let i = 0; i < 10; i++) {
  if (i === 5) {
    break; // Exit the loop when i is 5
  }
  console.log(i);
}


for (let i = 0; i < 10; i++) {
  if (i === 5) {
    continue; // Skip the current iteration when i is 5
  }
  console.log(i);
}


5::Two Pointers with a Single Loop:

function twoSum(nums, target) {
  let left = 0;
  let right = nums.length - 1;

  while (left < right) {
    const sum = nums[left] + nums[right];

    if (sum === target) {
      return [left, right]; // Indices of the pair
    } else if (sum < target) {
      left++;
    } else {
      right--;
    }
  }

  return null; // If no pair is found
}

const nums = [2, 7, 11, 15];
const target = 9;
console.log(twoSum(nums, target)); // Output: [0, 1]



  5. Sliding Window Technique:
  For problems where you need to find a subarray or substring w



Example: Finding the Maximum Element in an Array

function findMaxElement(arr) {
  if (arr.length === 0) {
    return undefined; // No maximum in an empty array
  }

  let max = arr[0]; // Initialize max with the first element

  for (let i = 1; i < arr.length; i++) {
    if (arr[i] > max) {
      max = arr[i]; // Update max if a larger element is found
    }
    // Loop Invariant: At this point, max is the maximum element in arr[0...i].
  }

  return max;
}


 15. Time Complexity Visualization:


 Visualize the time complexity of your 
 loops and algorithms. Tools like Big
  O Cheat Sheet can be helpful for
  understanding algorithm complexities.


  13. Be Mindful of Edge Cases:

if (myVar === null || myVar === undefined) {
  // Handle null or undefined case
}


const myArray = [];
if (myArray.length === 0) {
  // Handle the empty array case
}


if (myVar <= 0) {
  // Handle zero or negative case
}

if (typeof userInput !== 'string' || userInput.length === 0) {
  // Handle invalid input
}


if (typeof myVar !== 'number') {
  // Handle unexpected data type
}

10::Iterating Over Matrices:  |||||||||||||||||||

// Create a sample 2D matrix
const matrix = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];

// Iterate through rows and columns using nested loops
for (let row = 0; row < matrix.length; row++) {
  for (let col = 0; col < matrix[row].length; col++) {
    const element = matrix[row][col];
    console.log(`Element at row ${row}, col ${col}: ${element}`);
  }
}







